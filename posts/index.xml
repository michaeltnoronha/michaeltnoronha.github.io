<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mtn</title>
    <link>https://mtn.github.io/posts/index.xml</link>
    <description>Recent content in Posts on mtn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2017 Michael Noronha</copyright>
    <lastBuildDate>Tue, 28 Mar 2017 21:39:31 -0500</lastBuildDate>
    <atom:link href="https://mtn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Snake with GNU ncurese! -- Part I, ncurses basics</title>
      <link>https://mtn.github.io/posts/snake_part1/</link>
      <pubDate>Tue, 28 Mar 2017 21:39:31 -0500</pubDate>
      
      <guid>https://mtn.github.io/posts/snake_part1/</guid>
      <description>

&lt;p&gt;As my first game, I made snake in C using the graphics library ncurses! There are probably several dozen other languages that would have also sufficed or been better but I chose C because I picked it up pretty recently, so making a project from scratch was a decent challenge. Over two posts, I&amp;rsquo;ll walk through some of the process, including decisions I made along the way and the rationale behind them. In this one, I&amp;rsquo;ll set up the basic features of ncurses that I found useful.&lt;/p&gt;

&lt;h1 id=&#34;what-s-ncurses&#34;&gt;What&amp;rsquo;s ncurses?&lt;/h1&gt;

&lt;p&gt;ncurses is probably the easiest graphics library to get started with (not that I have much other experience yet), and is very well documented &lt;a href=&#34;http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/&#34;&gt;here&lt;/a&gt;. It came about as a successor to curses, a wrapper over terminal graphics functionality that allows us to render pretty things on different terminals without working with messy raw values. To the best of my knowledge, the necessary header is included with the Xcode developer tools for MacOS, and is available through &lt;code&gt;apt-get&lt;/code&gt; (or your default package manager) on linux. To make something simple like snake, there are only a few key concepts you need to wrap your mind around. Starting simple is good; I first stumbled on ncurses after googling &amp;ldquo;C terminal graphics&amp;rdquo; when working on a (not-yet-finished) Conway&amp;rsquo;s Game of Life simulator, and felt I was making too many decisions because I wanted to progress in the project without getting a feel for the full library. There&amp;rsquo;s lots more, though, which I&amp;rsquo;ll definitely be exploring in the future and you should check out after reading this post too!&lt;/p&gt;

&lt;h2 id=&#34;initialization-functions&#34;&gt;Initialization Functions&lt;/h2&gt;

&lt;p&gt;To initialize our ncurses session, we first call &lt;code&gt;initscr()&lt;/code&gt;. There are also a few functions we call at the start our program in order to define basic behaviors. The first is &lt;code&gt;cbreak()&lt;/code&gt;, which disables line buffering and also allows us to process control sequences (eg. CTRL^C). The next is &lt;code&gt;noecho()&lt;/code&gt;, which turns off input echoing, as its name suggests :). This means that the keys you press will not be printed on the screen like they normally are when you type into the terminal. The next one is &lt;code&gt;keypad()&lt;/code&gt;, which allows us to enable processing of additional keys like the function keys and more importantly, the arrow keys (unless you like to play snake with WASD or something, I guess). A minor one Finally, there&amp;rsquo;s halfdelay(), which sets an upper bound on the amount of time the program waits for input (after which it returns ERR). Sounds useful, right?&lt;/p&gt;

&lt;h2 id=&#34;output-and-input&#34;&gt;Output and Input&lt;/h2&gt;

&lt;p&gt;ncurses essentially gives you a grid systems of rows and columns. Within this basic grid, we can do simple things like move around and print characters but, as we&amp;rsquo;ll see, also introduce more additional structures. As with many similar programs, the top left corner of the screen is (0,0) rather than the bottom left as is conventional elsewhere. What is rather more unique is that throughout ncurses where coordinate arguments are used, the &amp;ldquo;y&amp;rdquo; is specified before the &amp;ldquo;x.&amp;rdquo; A few functions!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;move(int y,int x)&lt;/code&gt; &amp;ndash; Allows us to move the cursor to a specified location on the screen. Note that if we hide the cursor (call &lt;code&gt;curs_set(0)&lt;/code&gt;), this doesn&amp;rsquo;t produce any externally-observable change&lt;/p&gt;

&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>